// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

namespace Server.Migrations.PaymentMigrations
{
    [DbContext(typeof(PaymentContext))]
    [Migration("20210324110454_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Server.Models.Consumption.Appliance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplianceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalConsumptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmallUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("hoursDay")
                        .HasColumnType("int");

                    b.Property<int>("nrWatts")
                        .HasColumnType("int");

                    b.Property<int>("priceKw")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinalConsumptionId");

                    b.HasIndex("SmallUserId");

                    b.ToTable("Appliance");
                });

            modelBuilder.Entity("Server.Models.Consumption.EnergyLabel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EfficientIndex")
                        .HasColumnType("int");

                    b.Property<string>("EnergyClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalConsumptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SmallUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FinalConsumptionId")
                        .IsUnique()
                        .HasFilter("[FinalConsumptionId] IS NOT NULL");

                    b.HasIndex("SmallUserId");

                    b.ToTable("EnergyLabel");
                });

            modelBuilder.Entity("Server.Models.Consumption.FinalConsumption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("SmallUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("nrKw")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SmallUserId");

                    b.ToTable("FinalConsumption");
                });

            modelBuilder.Entity("Server.Models.Contact.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique()
                        .HasFilter("[ProviderId] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Server.Models.Contact.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Server.Models.Contact.AnswerAdmin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("MessageId")
                        .IsUnique()
                        .HasFilter("[MessageId] IS NOT NULL");

                    b.ToTable("AnswerAdmin");
                });

            modelBuilder.Entity("Server.Models.Contact.AnswerProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique()
                        .HasFilter("[MessageId] IS NOT NULL");

                    b.HasIndex("ProviderId");

                    b.ToTable("AnswerProvider");
                });

            modelBuilder.Entity("Server.Models.Contact.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SmallUserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Server.Models.Contact.Provider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("Server.Models.Payment.Donation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SumDonated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SmallUserId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Server.Models.Payment.Pay", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardOwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DonationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DonationId")
                        .IsUnique()
                        .HasFilter("[DonationId] IS NOT NULL");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Server.Models.Payment.StatusPayment", b =>
                {
                    b.Property<string>("PayId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PayId");

                    b.ToTable("StatusPayments");
                });

            modelBuilder.Entity("Server.Models.User.SmallUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SmallUser");
                });

            modelBuilder.Entity("Server.Models.Consumption.Appliance", b =>
                {
                    b.HasOne("Server.Models.Consumption.FinalConsumption", "FinalConsumption")
                        .WithMany("Appliances")
                        .HasForeignKey("FinalConsumptionId");

                    b.HasOne("Server.Models.User.SmallUser", "SmallUser")
                        .WithMany("Appliances")
                        .HasForeignKey("SmallUserId");

                    b.Navigation("FinalConsumption");

                    b.Navigation("SmallUser");
                });

            modelBuilder.Entity("Server.Models.Consumption.EnergyLabel", b =>
                {
                    b.HasOne("Server.Models.Consumption.FinalConsumption", "FinalConsumption")
                        .WithOne("EnergyLabel")
                        .HasForeignKey("Server.Models.Consumption.EnergyLabel", "FinalConsumptionId");

                    b.HasOne("Server.Models.User.SmallUser", "SmallUser")
                        .WithMany("EnergyLabels")
                        .HasForeignKey("SmallUserId");

                    b.Navigation("FinalConsumption");

                    b.Navigation("SmallUser");
                });

            modelBuilder.Entity("Server.Models.Consumption.FinalConsumption", b =>
                {
                    b.HasOne("Server.Models.User.SmallUser", "SmallUser")
                        .WithMany("FinalConsumptions")
                        .HasForeignKey("SmallUserId");

                    b.Navigation("SmallUser");
                });

            modelBuilder.Entity("Server.Models.Contact.Address", b =>
                {
                    b.HasOne("Server.Models.Contact.Provider", "Provider")
                        .WithOne("Address")
                        .HasForeignKey("Server.Models.Contact.Address", "ProviderId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Server.Models.Contact.AnswerAdmin", b =>
                {
                    b.HasOne("Server.Models.Contact.Admin", "Admin")
                        .WithMany("AnswerAdmins")
                        .HasForeignKey("AdminId");

                    b.HasOne("Server.Models.Contact.Message", "Message")
                        .WithOne("AnswerAdmin")
                        .HasForeignKey("Server.Models.Contact.AnswerAdmin", "MessageId");

                    b.Navigation("Admin");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Server.Models.Contact.AnswerProvider", b =>
                {
                    b.HasOne("Server.Models.Contact.Message", "Message")
                        .WithOne("AnswerProvider")
                        .HasForeignKey("Server.Models.Contact.AnswerProvider", "MessageId");

                    b.HasOne("Server.Models.Contact.Provider", "Provider")
                        .WithMany("AnswerProviders")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Message");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Server.Models.Contact.Message", b =>
                {
                    b.HasOne("Server.Models.User.SmallUser", "SmallUser")
                        .WithMany("Messages")
                        .HasForeignKey("SmallUserId");

                    b.Navigation("SmallUser");
                });

            modelBuilder.Entity("Server.Models.Payment.Donation", b =>
                {
                    b.HasOne("Server.Models.User.SmallUser", "SmallUser")
                        .WithMany("Donations")
                        .HasForeignKey("SmallUserId");

                    b.Navigation("SmallUser");
                });

            modelBuilder.Entity("Server.Models.Payment.Pay", b =>
                {
                    b.HasOne("Server.Models.Payment.Donation", "Donation")
                        .WithOne("Pay")
                        .HasForeignKey("Server.Models.Payment.Pay", "DonationId");

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("Server.Models.Payment.StatusPayment", b =>
                {
                    b.HasOne("Server.Models.Payment.Pay", "Pay")
                        .WithOne("StatusPayment")
                        .HasForeignKey("Server.Models.Payment.StatusPayment", "PayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pay");
                });

            modelBuilder.Entity("Server.Models.Consumption.FinalConsumption", b =>
                {
                    b.Navigation("Appliances");

                    b.Navigation("EnergyLabel");
                });

            modelBuilder.Entity("Server.Models.Contact.Admin", b =>
                {
                    b.Navigation("AnswerAdmins");
                });

            modelBuilder.Entity("Server.Models.Contact.Message", b =>
                {
                    b.Navigation("AnswerAdmin");

                    b.Navigation("AnswerProvider");
                });

            modelBuilder.Entity("Server.Models.Contact.Provider", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("AnswerProviders");
                });

            modelBuilder.Entity("Server.Models.Payment.Donation", b =>
                {
                    b.Navigation("Pay");
                });

            modelBuilder.Entity("Server.Models.Payment.Pay", b =>
                {
                    b.Navigation("StatusPayment");
                });

            modelBuilder.Entity("Server.Models.User.SmallUser", b =>
                {
                    b.Navigation("Appliances");

                    b.Navigation("Donations");

                    b.Navigation("EnergyLabels");

                    b.Navigation("FinalConsumptions");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
